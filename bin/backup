#!/usr/bin/env ruby

require 'yaml'
require 'fileutils'

$ops = { 'send' => '>', 'recv' => '<', 'del.' => '-' }

def rsync(src, dest, excludes: nil, sudo: false)
  cmd = %w[rsync --archive --delete --exclude-from=- --delete-excluded]
  cmd.prepend('sudo') if sudo
  cmd << "--out-format=%n\t%o"
  cmd << src + '/'
  cmd << dest

  IO.popen(cmd, 'w+') do |pipe|
    pipe.write(excludes) if excludes
    pipe.close_write
    print "\e[s" if $stdout.isatty
    pipe.each do |e|
      file, op = e.chomp.split("\t")
      next if file.end_with?('/')
      if $stdout.isatty
        print "\e[2K\e[u"
        print "%s %s\e[K\r" % [$ops[op], file]
      else
        puts "%s %s" % [$ops[op], file]
      end
    end
  end
end

def backup(src:, dest: src, excludes: nil)
  if $stdout.isatty
    puts "\e[1;34mBacking up '#{src}'\e[0m\033[K\n"
  else
    puts "Backing up '#{src}'"
  end

  rsync(src, $dest_path + dest, excludes: excludes, sudo: true)
end

def load_dest(dir:, device: nil)
  if device
    dev_path = File.join('/run/media/', ENV['USER'], device)
    path = File.join(dev_path, dir)

    system(*%w[udisksctl mount -b], '/dev/disk/by-label/' + device, exception: true) unless File.exists?(dev_path)
    raise unless File.exists?(dev_path)
  else
    path = dir
  end

  FileUtils.mkdir_p(path) unless File.directory?(path)
  path
end

profile = ARGV.first || 'main'
config = File.join(ENV['HOME'], '.config', 'backup', profile + '.yml')

$data = YAML.load(File.read(config), symbolize_names: true)
$dest_path = load_dest($data[:dest])
$data[:paths].each do |path|
  backup(path)
end
