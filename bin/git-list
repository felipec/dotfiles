#!/bin/sh

get_child_merge() {
	commit=$1 onto=$2
	commit=$(git rev-parse --verify --quiet "$commit") || return
	onto=$(git rev-parse --verify --quiet "$onto") || return
	cmd="git rev-list --ancestry-path --merges --parents $commit..$onto"
	child="$($cmd | grep -m 1 $commit)"
	echo "${child%% *}"
}

get_ancestry() {
	commit=$1 from=$2
	merge=$(get_child_merge $commit $from)
	if [ -n "$merge" ]; then
		echo "^$merge^1 $merge^2"
	else
		echo "^$from $commit"
	fi
}

get_refs() {
	glob=$1 from=$2
	opts="--exclude=$from --glob=$glob"
	base=$(git merge-base $(git rev-parse $opts))
	echo $opts --not $base
}

negate_upstreams() {
	revs="$1" default="$2"
	branches="$(git rev-parse --symbolic $revs)"
	for b in $branches; do
		b="${b#refs/heads/}"
		u="${b}@{u}"
		commit=$(git rev-parse --verify --quiet "$u") || u=$default
		echo "${u}..${b}"
	done
}

get_list() {
	cmd=$1
	shift

	case $cmd in
	all)
		get_refs "refs/*"
		;;
	branches)
		branches=$1
		test -n "$1" && shift
		get_refs "refs/heads/${branches}*" ""
		;;
	from-master)
		branch=${1:-@}
		test -n "$1" && shift
		get_ancestry $branch 'master'
		;;
	from-origin-master)
		branch=${1:-@}
		test -n "$1" && shift
		get_ancestry $branch 'origin/master'
		;;
	from-upstream)
		branch="${1:-@}"
		test -n "$1" && shift
		get_ancestry "$branch" "${branch}@{upstream}"
		;;
	negate-upstreams)
		branches="${1:-@}"
		test -n "$1" && shift
		negate_upstreams "$branches" master
		;;
	*)
		echo @
		echo "Unknown command '$cmd'" >&2
		exit 1
		;;
	esac

	echo $@
}

echo $(get_list "$@")
