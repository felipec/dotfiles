#!/usr/bin/env ruby

$tdir = '~/.config/transmission/torrents'

$dirs = []
$dirs << '~/downloads/torrents/series'
$dirs << '/run/media/felipec/shared/torrents/series'
$dirs << '/run/media/felipec/shared/torrents/movies'
$dirs << '/run/media/felipec/shared/torrents/other'

$inactive = {}

class TFile
  attr_reader :name, :dir, :file
  attr_accessor :size

  def initialize(name, dir)
    @name = name
    @dir = dir
    @file = File.join(@dir, @name)
    @size = 0
  end

  def <=>(b)
    @size <=> b.size
  end

  def to_s
    @file
  end

  def human_size
    units = %w[B KiB MiB GiB TiB Pib EiB]

    return '0.0 B' if @size == 0
    exp = (Math.log(@size) / Math.log(1024)).to_i
    exp = 6 if exp > 6

    '%.1f %s' % [@size.to_f / 1024 ** exp, units[exp]]
  end

end

$dirs.each do |d|
  d = File.expand_path(d)
  Dir.entries(d).each do |e|
    next if e[0] == '.'
    $inactive[e] = TFile.new(e, d)
  end
end

# Torrents still active
Dir.foreach(File.expand_path($tdir)) do |f|
  next unless f.end_with?('.torrent')
  if f =~ /(.*)\.\h{16}\.torrent/
    $inactive.delete($1)
  end
end

File.popen(%w[du -s --files0-from=-], 'r+', :err => File::NULL) do |pipe|
  $inactive.values.each do |e|
    pipe.write(e.file + "\0")
    size, file = pipe.readline.encode('utf-8', invalid: :replace).split("\t")
    e.size = size.to_i * 1024
  end
end

require 'fileutils'

$inactive.values.sort.reverse.each do |e|
  clean_lines = 2

  puts "\e[1;33m%-10s\e[0m '\e[1m%s\e[0m' \e[34m(%s)\e[0m" % [e.human_size, e.name, e.dir]
  if File.directory?(e.file)
    Dir.entries(e.file).each do |e|
      next if %w[. ..].include?(e)
      puts "%12s \e[32m%s\e[0m" % ['*', e]
      clean_lines += 1
    end
  end

  print "\nDelete? (y/n) "
  response = gets()
  clean_lines.times do
    printf "\e[A\e[2K"
  end

  next unless response[0] == 'y'

  FileUtils.rm_rf(e.file)
  puts "%10s \e[1;31mDeleted '%s'\e[0m" % ['', e.file]
end
