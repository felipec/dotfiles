#!/usr/bin/env ruby

require 'json'

$base_cmd = ARGV[0]
$base_dir = Dir.home + '/.local/share/histstat'
$historical = Dir.home + '/.local/share/histstat/historical.json'

$cmds = Hash.new(0)
$dirs = Hash.new(0)

if $historical and File.exists?($historical)
  $cmds.merge!(JSON.parse(File.read($historical)))
  $cmds.keep_if { |k, v| k.start_with?("#{$base_cmd} ") } if $base_cmd
end

def bump_cmd(cmd)
  cmd = cmd.split(' ')
  return if cmd.empty?
  return unless cmd.first == $base_cmd if $base_cmd
  cmd.each_with_index do |_, i|
    next if $base_cmd and i == 0
    e = cmd[0..i].join(' ')
    $cmds[e] += 1
  end
end

File.foreach($base_dir + '/commands', sep="\0", chomp: true) do |e|
  cmd = e.chomp('')
  bump_cmd(cmd)
end

File.foreach($base_dir + '/dirs', sep="\0", chomp: true) do |e|
  dir = e
  $dirs[dir] += 1
end

$aliases = {}
$hash_dirs = { Dir.home => '~' }

%x[zsh -i -c 'alias'].each_line do |l|
  if l =~ /^(\w+)='?(.+?)'?$/
    first = $2.split.first
    next if first == $1
    $aliases[$1] = $2
  end
end

%x[zsh -i -c 'hash -d'].each_line do |l|
  id, dir = l.chomp.split('=')
  $hash_dirs[dir] = id
end

def title(text)
  puts [nil, text, '-' * text.size]
end

title 'Top commands'

cmds_max = $cmds.values.max

$cmds.sort_by(&:last).reverse.first(20).each do |e, c|
  m = $aliases.has_key?(e) ? '*' : ' '
  puts " %s %3d%% %s\n" % [m, 100 * c / cmds_max, e]
end

exit if $base_cmd

title 'Top directories'

dirs_max = $dirs.values.max

$dirs.sort_by(&:last).reverse.first(20).each do |e, c|
  m = $hash_dirs.has_key?(e) ? '*' : ' '
  e = e.sub(Dir.home, '~')
  puts " %s %3d%% %s\n" % [m, 100 * c / dirs_max, e]
end
